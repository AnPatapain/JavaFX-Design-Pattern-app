Fichier : AbstractController.java
--------------------------------------------------
Méthode : public AbstractController(EventDispatcher eventDispatcher, RenderViewManager renderViewManager) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.setSubscription(eventDispatcher);

Méthode : public <T extends V> T getViewAs(ViewName viewName, Class<T> viewType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return viewType.cast(this.views.get(viewName));

Méthode : public void addView(ViewName viewName, V view) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.views.put(viewName, view);
--------------------------------------------------

Fichier : ControllerMediator.java
--------------------------------------------------
Méthode : public void subscribe(EventListener eventListener, EventType... eventTypes) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : for(EventType eventType : eventTypes) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : eventListeners.computeIfAbsent(eventType, k -> new ArrayList<>()).add(eventListener);

Méthode : public void dispatchEvent(EventType eventType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : eventListeners.get(eventType).forEach(listener -> listener.handleEvent(eventType));
--------------------------------------------------

Fichier: EventDispatcher.java
--------------------------------------------------
--------------------------------------------------

Fichier: EventListener.java
--------------------------------------------------
--------------------------------------------------

Fichier: EventType.java
--------------------------------------------------
--------------------------------------------------

Fichier : AbstractView.java
--------------------------------------------------
Méthode : protected AbstractView() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : if (!isDuringInitialization) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : throw new RuntimeException("Veuillez initialiser View en utilisant AbstractView.createView(Class<T> viewClass, String fxmlFile)");

Méthode : public static <V extends AbstractView<C>, C extends AbstractController<?>> V createView(Class<V> viewClass, String fxmlFile, C controller) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : FXMLLoader fxmlLoader = new FXMLLoader(viewClass.getResource(fxmlPath));

Méthode : } catch (IOException e) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : e.printStackTrace();

Méthode : public Scene getScene() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return scene;

Méthode : public void setScene(Scene scene) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : public abstract void initializeScene();

Méthode : public C getController() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return this.controller;

Méthode : public void setController(C controller) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
--------------------------------------------------

Fichier : RenderViewManager.java
--------------------------------------------------
Méthode : public RenderViewManager(Stage stage) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public void renderView(AbstractView view) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Retour : this.stage.setScene(view.getScene());
--------------------------------------------------

Fichier : ViewName.java
--------------------------------------------------
--------------------------------------------------

Fichier : CreationController.java
--------------------------------------------------
Méthode : public CreationController(EventDispatcher eventDispatcher, RenderViewManager renderViewManager) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : super(eventDispatcher, renderViewManager);

Méthode : public void setHorseService(IHorseService horseService) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public void setSubscription(EventDispatcher eventDispatcher) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public void handleEvent(EventType eventType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : if (eventType == EventType.SHOW_CREATION) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.renderViewManager.renderView(this.getViewAs(ViewName.CREATION, CreationView.class));

Méthode : public void createHorse(String horseName, int weight) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : CreationView creationView = this.getViewAs(ViewName.CREATION, CreationView.class);

Méthode : } catch (HorseNameNotDefinedException e) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : creationView.printError("Error", "Horse Name Not Defined");

Méthode : } catch (HorseNameConflictException e) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : creationView.printError("Error", "Horse Name already exists");

Méthode : } catch (HorseWeightNotANumberException e) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : creationView.printError("Error", "Horse Weight Not ANumber");

Méthode : public void browseToHome() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.eventDispatcher.dispatchEvent(EventType.SHOW_HOME);
--------------------------------------------------

Fichier : CreationView.java
--------------------------------------------------
Méthode : public void initializeScene() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.setScene(new Scene(borderPane, 600, 400));

Méthode : public void printConfirmation(String titre,String message) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : Alert alert = new Alert(Alert.AlertType.INFORMATION,titre, ButtonType.OK);

Méthode : public void printError(String titre,String message) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : Alert alert = new Alert(Alert.AlertType.ERROR,titre, ButtonType.OK);

Méthode : public void createHorse(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.getController().createHorse()

Méthode : } catch (NumberFormatException e) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.printError("Erreur", "poids non valide");

Méthode : public void gotomenu(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.getController().navigateToHome();
--------------------------------------------------

Fichier : HomeController.java
--------------------------------------------------
Méthode : public HomeController(EventDispatcher eventDispatcher, RenderViewManager renderViewManager) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : super(eventDispatcher, renderViewManager);

Méthode : public void setSubscription(EventDispatcher eventDispatcher) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : eventDispatcher.subscribe(this, EventType.SHOW_HOME);

Méthode : public void handleEvent(EventType eventType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : if (eventType == EventType.SHOW_HOME) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.renderViewManager.renderView(this.getViewAs(ViewName.HOME, HomeView.class));

Méthode : public void browseToCreation() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.eventDispatcher.dispatchEvent(EventType.SHOW_CREATION);

Méthode : public void browseToHorseList() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.eventDispatcher.dispatchEvent(EventType.SHOW_HORSE_LIST);
--------------------------------------------------

Fichier : HomeView.java
--------------------------------------------------
Méthode : public void initializeScene() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.setScene(new Scene(borderPane, 600, 400));

Méthode : public void gotocreation(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.getController().navigateToCreation();

Méthode : public void gotohorselist(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.getController().navigateToHorseList();
--------------------------------------------------

Fichier : HorseListController.java
--------------------------------------------------
Méthode : public HorseListController(EventDispatcher eventDispatcher, RenderViewManager renderViewManager) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : super(eventDispatcher, renderViewManager);

Méthode : public void setHorseService(IHorseService horseService) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public void setSubscription(EventDispatcher eventDispatcher) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public void handleEvent(EventType eventType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : HorseListView horseListView = this.getViewAs(ViewName.HORSE_LIST, HorseListView.class);

Méthode : switch (eventType) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : horseListView.updateHorseToView(this.horseService.getHorses());

Méthode : public void browseToHome() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.eventDispatcher.dispatchEvent(EventType.SHOW_HOME);

Méthode : public void browseToCreation() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.eventDispatcher.dispatchEvent(EventType.SHOW_CREATION);
--------------------------------------------------

Fichier : HorseListView.java
--------------------------------------------------
Méthode : public void initializeScene() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.setScene(new Scene(borderPane, 600, 400));

Méthode : public void updateHorseToView(List<Horse> horses) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : String horsesToString = horses.stream()

Méthode : public void gotomenu(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : this.getController().navigateToHome();

Méthode : public void createHorse(ActionEvent actionEvent) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Paramètre/Retour : this.getController().navigateToCreation();
--------------------------------------------------

Fichier : HorseNameConflictException.java
--------------------------------------------------
--------------------------------------------------

Fichier : HorseNameNotDefinedException.java
--------------------------------------------------
--------------------------------------------------

Fichier : HorseWeightNotANumberException.java
--------------------------------------------------
--------------------------------------------------

Fichier : Horse.java
--------------------------------------------------
Méthode : public Horse(String name, int weight) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.

Méthode : public String getName() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return name;

Méthode : public int getWeight() {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return weight;
--------------------------------------------------

Fichier : HorseServiceImpl.java
--------------------------------------------------
Méthode : if (Objects.isNull(horseName) || horseName.isEmpty()) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : throw new HorseNameNotDefinedException();

Méthode : if(weight < 0) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : throw new HorseWeightNotANumberException();

Méthode : if (horseMap.containsKey(horseName)) {
Pourquoi : pour effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : throw new HorseNameConflictException();

Méthode : public List<Horse> getHorses() {
Pourquoi : pour effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : return horseMap.values().stream().toList();
--------------------------------------------------

Fichier : IHorseService.java
--------------------------------------------------
--------------------------------------------------

Fichier : Application.java
--------------------------------------------------
Méthode : public void start(Stage stage) throws IOException {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : EventDispatcher controllerMediator = new ControllerMediator();

Méthode : public static void main(String[] args) {
Pourquoi : effectuer une tâche spécifique liée à la fonctionnalité du composant.
Param/Return : launch();
--------------------------------------------------
